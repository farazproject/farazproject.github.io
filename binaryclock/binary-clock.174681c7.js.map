{"version":3,"sources":["index.js"],"names":["BinaryClock","$grid","document","querySelector","$time","init","setInterval","updateTime","bind","time","Date","toTimeString","split","timeString","replaceAll","binaryGrid","convertToBinaryGrid","showBinaryTime","innerHTML","paddings","grid","forEach","digit","index","paddedBinary","toString","padStart","push","output","col","binaryDigit","clock"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;IAEMA;AACF,yBAAc;AAAA;;AACV,SAAKC,KAAL,GAAaC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;AACA,SAAKC,KAAL,GAAaF,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;AACA,SAAKE,IAAL;AACH;;;;WAED,gBAAO;AACHC,MAAAA,WAAW,CAAC,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAD,EAA6B,IAA7B,CAAX;AACH;;;WAED,sBAAa;AACT,UAAIC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,YAAX,EAAX;AACAF,MAAAA,IAAI,GAAGA,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP;AACA,UAAIC,UAAU,GAAGJ,IAAI,CAACK,UAAL,CAAgB,GAAhB,EAAqB,EAArB,CAAjB;AACA,UAAMC,UAAU,GAAG,KAAKC,mBAAL,CAAyBH,UAAzB,CAAnB;AACA,WAAKI,cAAL,CAAoBF,UAApB;AACA,WAAKX,KAAL,CAAWc,SAAX,GAAuBT,IAAvB;AACH;;;WAED,6BAAoBI,UAApB,EAAgC;AAC5B,UAAIM,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAf;AAEA,UAAMC,IAAI,GAAG,EAAb;AACAP,MAAAA,UAAU,CAACD,KAAX,CAAiB,EAAjB,EAAqBS,OAArB,CAA6B,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC3C,YAAIC,YAAY,GAAG,CAAC,CAACF,KAAF,EACdG,QADc,CACL,CADK,EAEdC,QAFc,CAELP,QAAQ,CAACI,KAAD,CAFH,EAEY,GAFZ,CAAnB;AAIAH,QAAAA,IAAI,CAACO,IAAL,CAAUH,YAAY,CAACZ,KAAb,CAAmB,EAAnB,CAAV;AACH,OAND;AAQA,aAAOQ,IAAP;AACH;;;WAED,wBAAeL,UAAf,EAA2B;AACvB,UAAIa,MAAM,GAAG,EAAb;AACAb,MAAAA,UAAU,CAACM,OAAX,CAAmB,UAAAQ,GAAG,EAAI;AACtBD,QAAAA,MAAM,IAAI,mBAAV;AACAC,QAAAA,GAAG,CAACR,OAAJ,CAAY,UAAAS,WAAW,EAAI;AACvBF,UAAAA,MAAM,gCAAwBE,WAAW,KAAK,GAAhB,GAAsB,QAAtB,GAAgC,EAAxD,cAAN;AACH,SAFD;AAGAF,QAAAA,MAAM,IAAI,QAAV;AACH,OAND;AAOA,WAAK3B,KAAL,CAAWiB,SAAX,GAAuBU,MAAvB;AACH;;;;;;AAGL,IAAMG,KAAK,GAAG,IAAI/B,WAAJ,EAAd","file":"binary-clock.174681c7.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nclass BinaryClock {\n    constructor() {\n        this.$grid = document.querySelector('.grid');\n        this.$time = document.querySelector('.time');\n        this.init();\n    }\n\n    init() {\n        setInterval(this.updateTime.bind(this), 1000);\n    }\n\n    updateTime() {\n        let time = new Date().toTimeString();\n        time = time.split(' ')[0];\n        let timeString = time.replaceAll(':', '');\n        const binaryGrid = this.convertToBinaryGrid(timeString);\n        this.showBinaryTime(binaryGrid);\n        this.$time.innerHTML = time;\n    }\n\n    convertToBinaryGrid(timeString) {\n        let paddings = [2, 4, 3, 4, 3, 4];\n\n        const grid = [];\n        timeString.split('').forEach((digit, index) => {\n            let paddedBinary = (+digit)\n                .toString(2)\n                .padStart(paddings[index], '0');\n\n            grid.push(paddedBinary.split(''));\n        });\n\n        return grid;\n    }\n\n    showBinaryTime(binaryGrid) {\n        let output = '';\n        binaryGrid.forEach(col => {\n            output += '<div class=\"col\">';\n            col.forEach(binaryDigit => {\n                output += `<div class=\"cell ${binaryDigit === '1' ? 'active': ''}\"></div>`;\n            });\n            output += '</div>';\n        });\n        this.$grid.innerHTML = output;\n    }\n}\n\nconst clock = new BinaryClock();\n"]}